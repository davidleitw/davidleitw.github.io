<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>timer on davidLei</title>
    <link>http://example.org/tags/timer/</link>
    <description>Recent content in timer on davidLei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>davidleitw@gmail.com (davidlei)</managingEditor>
    <webMaster>davidleitw@gmail.com (davidlei)</webMaster>
    <lastBuildDate>Fri, 24 Dec 2021 01:04:53 +0800</lastBuildDate><atom:link href="http://example.org/tags/timer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang 定時器(一) Time, Ticker 基本用法整理</title>
      <link>http://example.org/posts/time01/</link>
      <pubDate>Fri, 24 Dec 2021 01:04:53 +0800</pubDate>
      <author>davidleitw@gmail.com (davidlei)</author>
      <guid>http://example.org/posts/time01/</guid>
      <description>在後端中常常會有需要定時的場景出現，像是如果處理 request 超過一定時間就觸發 timeout，或者利用定時的功能推送請求等等，這篇文章將會簡單介紹一些 golang 內建的定時器功能，以及可能會遇到的坑。
所有有關定時器的功能都在 time 內，使用前必須先
import &amp;#34;time&amp;#34; 單次定時事件 - Timer // src/time/sleep.go  // The Timer type represents a single event. // When the Timer expires, the current time will be sent on C, // unless the Timer was created by AfterFunc. // A Timer must be created with NewTimer or AfterFunc. type Timer struct { C &amp;lt;- chan Time r runtimeTimer } 在 golang 中 Timer 可以用來表示一個單一事件，可以用 NewTimer 或者 AfterFunc 兩個 function 去建立一個新的 Timer，簡單的使用範例如下</description>
    </item>
    
  </channel>
</rss>
