<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>scheduler - Tag - davidLei</title>
        <link>http://example.org/tags/scheduler/</link>
        <description>scheduler - Tag - davidLei</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>davidleitw@gmail.com (davidlei)</managingEditor>
            <webMaster>davidleitw@gmail.com (davidlei)</webMaster><lastBuildDate>Fri, 07 Jan 2022 03:12:53 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/scheduler/" rel="self" type="application/rss+xml" /><item>
    <title>Linux schedule 原始碼解讀</title>
    <link>http://example.org/posts/linux_get_context_switch/</link>
    <pubDate>Fri, 07 Jan 2022 03:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/linux_get_context_switch/</guid>
    <description><![CDATA[第一次 trace 整個調度的流程，kernel 真的是個大坑，有很多概念都還不熟，只能整理大概的流程，具體很多 function 的作用都沒辦法很好的說明，希望之後可以多閱讀 source code，把相關的知識慢慢補齊，拼湊成完整的知識。
schedule 要 trace 調度器要先找到 schedule 的入口，定義在 kernel/sched/core.c，函式定義如下
asmlinkage __visible void __sched schedule(void) { struct task_struct *tsk = current; // 避免 deadlock 	sched_submit_work(tsk); do { // 調度本身無法搶佔，等調度完畢再開啟 	preempt_disable(); __schedule(false); // 調度完成，開啟搶佔功能 	sched_preempt_enable_no_resched(); } while (need_resched()); // 檢查是不是被設置 TIF_NEED_RESCHED，如果被設置就重新調度 } EXPORT_SYMBOL(schedule); sched_submit_work static inline void sched_submit_work(struct task_struct *tsk) { if (!tsk-&gt;state || tsk_is_pi_blocked(tsk)) return; /* * If we are going to sleep and we have plugged IO queued, * make sure to submit it to avoid deadlocks.]]></description>
</item></channel>
</rss>
