<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>system_call - Tag - davidLei</title>
        <link>http://example.org/tags/system_call/</link>
        <description>system_call - Tag - davidLei</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>davidleitw@gmail.com (davidlei)</managingEditor>
            <webMaster>davidleitw@gmail.com (davidlei)</webMaster><lastBuildDate>Wed, 05 Jan 2022 00:12:53 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/system_call/" rel="self" type="application/rss+xml" /><item>
    <title>Linux fork() 底層實作流程整理</title>
    <link>http://example.org/posts/linux_fork_01/</link>
    <pubDate>Wed, 05 Jan 2022 00:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/linux_fork_01/</guid>
    <description><![CDATA[因為作業需要在 task_struct 中加入 counter 並且觀察調度器的行為，所以在這邊寫一份筆記來紀錄一下在 linux 中一個 process 建立的時候在哪裡初始化，從 fork() 開始慢慢 trace 下去。
 kernel 版本使用 v4.14.259
 在 Linux 中並沒有明確區分 process 跟 thread, task_struct 可以根據創立條件的不同代表 process 或者 thread。
從實作的角度看可以有以下幾種 system call 建立新的 task_struct:
 建立 user process: fork, vfork, clone 建立 kernel thread: kernel_thread, kthread_create  以上這些 API 最後都會呼叫 /kernel/fork.c 中的 _do_fork 來進行 create task_struct 的操作，只是會根據給的參數不同，來決定建立出來的 task_struct 的性質，以上幾個 system call 的差別也可以參考 The difference between fork(), vfork(), exec() and clone()]]></description>
</item></channel>
</rss>
