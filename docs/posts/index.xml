<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - davidLei</title>
        <link>https://davidleitw.github.io/posts/</link>
        <description>All Posts | davidLei</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>davidleitw@gmail.com (davidlei)</managingEditor>
            <webMaster>davidleitw@gmail.com (davidlei)</webMaster><lastBuildDate>Mon, 19 Dec 2022 22:13:53 &#43;0800</lastBuildDate><atom:link href="https://davidleitw.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Bypassing the Load Balancer Without Regrets - SoCC ’20</title>
    <link>https://davidleitw.github.io/posts/paper01/</link>
    <pubDate>Mon, 19 Dec 2022 22:13:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/paper01/</guid>
    <description><![CDATA[前言 最近為了找論文題目看了不少論文，剛好趁這個機會寫點文章當作讀這些 paper 的學習筆記，這篇 主要提出一個新的 Load balance 的機制，希望可以消除 LB 在 data path 花費的時間，讓 LB 專注於處理連線請求，決定 connection 去往哪台 server 之後就讓 Client 與 server 之間直接連線，細節就看底下的簡介或者論文內文吧，我覺得這篇 paper 在概念講解的地方畫了幾張不錯的示意圖，如果想要解釋 L4 的 load balancer 怎麼運作的，這是一篇滿推薦的論文。
這篇論文的作者也用了 P4, eBPF 等技術實現了他們的論文，如果有興趣的也可以研究看看實現的 code
常見 LB 技術分類 這篇論文在前面的幾個段落介紹了常見了 Load Belance 技術，然後規劃了一些簡單的實驗來分析各種不同技術的優劣，文中用以下五個標準/指標來分類不同種類的 LB 技術，如下圖所示
比較圖表如下:
其中 L4 的 Load Balancer 以形式可以分成有沒有支援 DSR(Direct Server Return)，又或者分為 Stateless 和 Stateful，以筆者的理解大規模的服務來說會盡量把 Load Balancer 設計成無狀態的，這樣才能把雲端環境的動態優勢發揮出來，像是另一篇關於 LB 的論文 A High-Speed Load-Balancer Design with Guaranteed Per-Connection-Consistency NSDI2020 有提到一個觀點，為什麼現在主流的 LB 技術都不依靠像是 weighted round robin 或者 power of two choices 這種可以根據伺服器狀態來最佳化負載的演算法，以下引用該文章的說法]]></description>
</item><item>
    <title>搭建最小化的 xdp 實驗環境</title>
    <link>https://davidleitw.github.io/posts/xdp_example_01/</link>
    <pubDate>Mon, 12 Dec 2022 21:00:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/xdp_example_01/</guid>
    <description><![CDATA[前言 一般來說學習 xdp 都會參考 xdp-tutorial，這個教學非常完整，雖然有一些範例可能需要額外查一些資源才能完成，但依舊被很多文章譽為學習 xdp 的最佳資源。
但是這個專案包裝了一些 testenv 的腳本方便學習的人不用自己架設環境，或者煩惱編譯的問題，在學習過程中的確很方便，不過如果想要自己建立新的 xdp 專案可能就需要理解編譯過程具體用了哪些工具，依賴的部份要怎麼引入，本篇文章想要搭建一個最簡化的實驗環境滿足以下幾點要求:
/bpf 底下存放 xdp 程式碼 Makefile 只包含 make all, make clean 兩個最簡單的功能，剩下根據需求再自行添加 main.go 負責把編譯好的 byte code 載入 kernel，並且能對 map 進行操作 我認為只要符合以上幾點就能最小化的建立實驗環境，會用 go 語言是因為這樣可以不用處理 c++ 一些要編譯的前置作業。
理想上我們最後的目錄會長這樣，符合我們希望的最小化專案需求
實際上可能會因為 go.mod 這些額外的配置多一些檔案，或者放一些編譯時需要的 header，不過本文會盡可能的讓目錄保持整潔，讓學習 xdp 的人不會被眼花撩亂的配置檔案搞的不知所措。
底下我們會根據 xdp-tutorial 編寫一個簡單的 xdp 程式，然後編譯成 .o 檔之後由 user space 的程式(由 go 語言編寫) 來負責載入 xdp Program。
編寫 xdp 範例 這邊我們參考 xdp-tutorial 的 packet01-parsing 中出現的一個例子，接收 ICMP 封包，並把 sequence number 為偶數的封包丟棄，不需要改動封包內容，算是一個很基本的範例。]]></description>
</item><item>
    <title>查找動態庫(.so) 是否安裝過以及路徑使用 ldconfig</title>
    <link>https://davidleitw.github.io/posts/ldconfig_1/</link>
    <pubDate>Mon, 24 Oct 2022 00:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/ldconfig_1/</guid>
    <description><![CDATA[在編譯過程中可能會用到一些動態庫(.so) 來編譯，時常會遇到找不到需要的 .so 檔案
error while loading shared libraries&hellip; cannot open shared object file: No such file or directory
像是上面的這個錯誤訊息就是常常會看見的老朋友XD，這時我們就可以使用 ldconfig 來搜索是否有安裝過指定的 .so
一般來說 Linux 底下的 .so 都存放在 /lib, /usr/lib 底下，ldconfig 指令會在預設的路徑底下查找
詳細的用法可以參考 ldconfig，一般如果只是要根據關鍵字查找，只要配合 -p 即可，像是我如果想在本地找到 ngtcp2 相關的 .so 我就可以輸入
$ ldconfig -p | grep ngtcp2 ]]></description>
</item><item>
    <title>Linux file descriptor 理解</title>
    <link>https://davidleitw.github.io/posts/fd/</link>
    <pubDate>Tue, 28 Jun 2022 04:16:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/fd/</guid>
    <description><![CDATA[前言 file descriptor 常被簡稱為 fd, 在學習 Linux 的過程中，會看到很多 system call 藉由 fd 來操作文件或抽象資源，像是 network programming 中呼叫 socket 之後會使用回傳的 socket fd 去進行後續的操作，或者 I/O 領域的 epoll 同樣在呼叫 epoll_create 之後會回傳 fd，此後對於 epoll 相關的操作都要把 fd 當作第一個參數傳入。
在 Linux 中常常會看到 fd 的身影，但一直沒有花時間去深入了解這個 fd 底層的實現，只是有模糊的概念而已，所以趁這個機會來整理一篇筆記，紀錄一下。
在 File descriptor 中可以簡單看一下，究竟在 Linux 中有多少 system call 使用了 File descriptor 的概念，就知道 fd 在 Linux 中的重要性了。
Everything is a file Linux 秉持著 UNIX 哲學 Everything is a file，這個概念的好處是可以用一組通用的 Interface 來操作不同資源，在資源跟使用者之間加上一層抽象層，進而延伸出 Universal I/O Model 的概念。]]></description>
</item><item>
    <title>Docker 網路模型與 Linux namespace, bridge 機制探討</title>
    <link>https://davidleitw.github.io/posts/docker_network_ns/</link>
    <pubDate>Wed, 04 May 2022 00:01:01 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/docker_network_ns/</guid>
    <description><![CDATA[在 Container 中最重要的一個特性就是資源的隔離，在 Linux 中透過 namespace 提供不同資源的隔離機制，這篇文章會特別探討其中出現最頻繁的 network 的隔離機制，並且透過簡單的實驗來觀察 Docker 的網路模型是怎麼透過 namespace 實現的。
Network Namespace 在 command line 操作 network namespace 通常會使用 ip netns 來操作，先引用 ip-netns 的 man page 來介紹一下 network namespace 的定義
A network namespace is logically another copy of the network stack, with its own routes, firewall rules, and network devices.
也可以查看 NETWORK_NAMESPACES(7)
因為 network namespace 本身隔離了整個 network stack, 所以幾乎所有關於 network 的資源都會被隔離，每個 namespace 內這些資源都是獨立存在的。
如果有牽涉到 fork() 等建立新的 process 的行為，原則上 child process 會繼承 parent 的 network space。]]></description>
</item><item>
    <title>sudo go: command not found 問題解決</title>
    <link>https://davidleitw.github.io/posts/sudogo/</link>
    <pubDate>Sat, 09 Apr 2022 00:01:01 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/sudogo/</guid>
    <description><![CDATA[這問題算是一個小坑，每次開新的虛擬機或者建環境的時候都會遇到(然後每次都忘記解決方式跑去google)，所以在這邊紀錄一下解決方式
/etc/sudoers 在用 sudo 下指令時，系統會從 /etc/sudoers 這個文件來獲得環境變數，根據那些路徑去找指令的執行檔案在哪，所以我們需要把 /usr/local/go/bin 放到 /etc/sudoers 裡面，讓系統知道 go 指令要去哪執行
/etc/sudoers 裡面有個 secure_path，把 usr/local/go/bin 加到那個字串即可.]]></description>
</item><item>
    <title>從執行順序來探討 Race condition, go 語言的 happens-before 規則</title>
    <link>https://davidleitw.github.io/posts/concurrency02/</link>
    <pubDate>Fri, 01 Apr 2022 00:01:01 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/concurrency02/</guid>
    <description><![CDATA[同步處理(Synchronization) 確保多個執行單元同時存取某些資源的時候，執行結果不會因為執行單元的時間先後導致發生不可預期的錯誤。
Linux kernel 提供了很多協助處理 Synchronization 問題的機制，如果不在 Concurrency 的架構內使用適當的同步技術，就可能會引發 Race condition 的問題。
可以參考 Concurrency in the Kernel 來快速了解 kernel 內對於 Concurrency 提供了什麼樣的工具。
Race condition 在一組執行單元(process/thread)以 shared memory 的方式進行資料共享或者溝通時，因為沒有對於共享變數提供互斥存取(mutual exclusive access)的處理，可能會導致執行單元之間因為交錯執行，導致最後的結果不如預期。
底下用一個簡單的例子來說明 race condition 造成執行結果不如預期的情況。
#include &lt;thread&gt; #include &lt;iostream&gt; const int thread_num = 20000; void func(int &amp;count) { count = count + 1; } int main() { int count = 0; std::thread threads[thread_num]; for (int i = 0; i &lt; thread_num; ++i) threads[i] = std::thread(func, std::ref(count)); for (auto &amp;th : threads) th.]]></description>
</item><item>
    <title>Concurrency vs Parallelism 淺談兩者區別以及名詞介紹</title>
    <link>https://davidleitw.github.io/posts/concurrency01/</link>
    <pubDate>Wed, 23 Mar 2022 00:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/concurrency01/</guid>
    <description><![CDATA[前言 最近在複習 jserv 老師的並行與多執行緒程式設計，一開始介紹了兩個常常被混淆的名詞，Concurrency 與 Parallelism，每次感覺懂了，過一陣子要我清楚的說明又有點講不太清楚，所以來寫一篇筆記紀錄一下。
裡面有些說法跟圖片是參考 jserv 老師的講座，裡面內容非常精彩，有機會的話一定要挑戰看看!
Concurrency(並行) vs Parallelism(平行) 常被混淆的原因不只是因為兩個單字的中文翻譯很像，而且兩者在觀念上也有重疊的部份，所以一開始很難去分清楚這兩者的差異。
Concurrency 通常用來描述程式的架構，將程式的功能拆成多個不同且獨立運行的模組或稱為工作(Task)，Parallelism 則是強調同時執行多個程式，底下會詳細舉例說明兩者的差異。
Concurrency 把程式功能拆分的小的 Task 後，如果同時運作，就可以說 Concurrency 有用到 Parallelism，所以不一定要用 Parallelism 才能達到 Concurrency 的目的。
Concurrency 只有強調把程式拆開成多個可獨立執行的模組，但沒有強調這些拆開的模組一定要同時執行。
Parallelism 更強調的是同時的概念，不同的任務可以分配給不同的硬體，同一時間會有多個任務一起同時執行。
所以講到 Concurrency 偏向討論在程式架構上，把一個任務拆成多個可獨立執行的子任務，Parallelism 則討論規劃怎麼分配資源的議題，讓多個子任務可以同時執行。
單一 cpu 的 Concurrency 在以前的年代，或者一些資源受限的環境下，可能運算資源只有單個 cpu，這時候如果有多位使用者想同時使用這台電腦就必須要營造出 Concurrency 的感覺，讓每個使用者都覺得自己使用了這個電腦的全部資源。
底下的 jserv 老師上課給的範例
可以看到在單一 cpu 的場景，意味著同一時間只能有一個任務被執行，所以硬體需要在不同任務之間快速切換，在人類的角度，每個電腦的使用者都覺得自己有著所有的資源，但其實只是切換的速度很快，讓使用者有種錯覺。
以暗殺教室的殺老師為例，先不用講詳細的設定，在漫畫中有一幕場景，殺老師想要為底下的學生每個人量身打造上課的教材，但是上課時是固定的，這時候顯然殺老師有修過 Linux 核心設計，所以知道在單核的情況下只能透過快速的切換讓底下每位學生在體感上都上滿一整節課，示意圖如下
找不到上課的素材，只能用體育課的快速切換當示意圖
因為殺老師只有單一個體，所以可以視作單一 cpu，在不同使用者之間快速切換，這樣就可以說他是 Concurrency，但是不能稱為 Parallelism，不能稱為 Parallelism 是因為即使移動的再快，都不符合同時的要求。
那動漫界最適合解釋 Parallelism 的角色是誰呢? 當然是火影忍者的漩渦鳴人了，他的招牌多重影分身之術就很適合拿來解釋 Parallelism 的概念。
在設定上，多重影分身中每個分身都是有實體的存在，如果每個分身同時進行著某個任務的話，我們就可以說符合 Parallelism 的概念。
今天如果鳴人在寫作業，總共有10題，他叫了九個分身，大家一起完成作業，所以一個大的任務(作業)拆成10個子任務(每一個小題)，而且十個人同時去完，這樣就同時符合 Concurrency 跟 Parallelism 的定義了。]]></description>
</item><item>
    <title>資料庫 ER Model(一): Entity 與 Attribute</title>
    <link>https://davidleitw.github.io/posts/db01/</link>
    <pubDate>Mon, 21 Mar 2022 00:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/db01/</guid>
    <description><![CDATA[收集到 Requirements 最難，很難提出&quot;精準&quot;的需求 Entity entity 是 RDBMS 中實際的資料實體，可以用程式的概念理解，定義好 struct 之後一定會在某個地方建立一個實體，裡面會根據 struct field type 去存放資料。
type student struct { name string age int } func main() { studentA := student{&#34;david&#34;, &#34;20&#34;} } studentA 就可以視為一個 entity，擁有真正資料的實體。
Attribute attribute 描述 entity 的屬性，拿上面 student 的例子，name, age 都可以當作 attribute。
在資料庫內 attribute 分成很多不同類型，大致可以分成 Simple, Composite, Multi-valued。
Simple Simple attribute 通常指那些無法繼續再分割的 field，對應到程式語言可以理解成基本的 data type，像是 student 的 age 就是單純的 int。
Composite Composite attribute 是由多個不同的部份組成一起的概念，像是外國的名字可能有 FirstNAme, MiddleName, LastName 等等]]></description>
</item><item>
    <title>leetcode 1022. Sum of Root To Leaf Binary Numbers [Easy]</title>
    <link>https://davidleitw.github.io/posts/lc1022/</link>
    <pubDate>Tue, 11 Jan 2022 00:12:53 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://davidleitw.github.io/posts/lc1022/</guid>
    <description><![CDATA[題目敘述 Input: root = [1, 0, 1, 0, 1, 0, 1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
給一個節點為 0 或者 1 的 binary tree，回傳從 root 為起點到各個 leaf 節點路徑組成二進位數的合。
解題紀錄 利用 DFS 去尋訪，如果 !root-&gt;left &amp;&amp; !root-&gt;right 就代表到達 leaf，直接回傳算出來的值。
class Solution { public: int sumRootToLeaf(TreeNode* root) { return solution(root, 0); } int solution(TreeNode *root, int bin) { if (!]]></description>
</item></channel>
</rss>
