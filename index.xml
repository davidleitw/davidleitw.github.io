<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>davidlei Blog</title>
    <link>https://davidleitw.github.io/</link>
    <description>Recent content on davidlei Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://davidleitw.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>學習目標</title>
      <link>https://davidleitw.github.io/posts/daily/day2/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidleitw.github.io/posts/daily/day2/</guid>
      <description>平常沒有目標的話有時候會太放鬆，所以寫一些今年想要持續做的事情(希望不要石沉大海)。
 每週至少兩題LeetCode題目 每月至少一篇paper閱讀心得(會先閱讀一些經典的分散式系統 paper)  二月: The Google File System(暫定)   每三個月至少一本書的心得(已經囤積了接近20本書沒看..多少消化一下) 找時間再讀一輪 Computer Networking: A Top-Down Approach  常常參考面試心得文有關於網路相關的題目自己沒辦法很清楚的回答，感覺基礎不是很好。    目前預計七月份左右就會進駐實驗室，希望可以盡快上手相關的基本知識。</description>
    </item>
    
    <item>
      <title>每日進度</title>
      <link>https://davidleitw.github.io/posts/daily/day1/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidleitw.github.io/posts/daily/day1/</guid>
      <description>這篇文章想要紀錄每天看的一些文章以及Leetcode的刷題情況，自2021-02-09開始紀錄。
以便於以後如果想要寫心得文章可以快速找到之前讀過的資料
2021/02/09以前的寒假進度  MIT 6.824  lab1 Lec1, Lec2 paper: MapReduce   閱讀清單  2021/02/09  MIT 6.824: Lec3 + paper: The Google File System 剛開始看 LeetCode:146. LRU Cache  2021/02/10  閱讀文章: LRU/LFU解析  2021/02/11  LeetCode: 460. LFU Cache 繼續挑戰中 繼續閱讀 paper: The Google File System  2021/02/15  MIT 6.824: Lec3  2021/02/19  LeetCode: 2. Add Two Numbers BlueAbyss專案 初步構思 backup worker channel，假設 pool 的使用率達到一定程度，用一條 goroutine 來協調生成 backup channel 緩衝。  2021/02/20  BlueAbyss專案 應該要把workerQueue中back channel移動到外面，獨立出來，還在構思怎麼抽比較合適。  2021/02/21 ~ 2021/02/25  最近都在挑戰jserv linux課程的作業，目前正穩定的看影片中XD  </description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://davidleitw.github.io/posts/introduction/</link>
      <pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate>
      
      <guid>https://davidleitw.github.io/posts/introduction/</guid>
      <description>一個喜歡宅在家追番寫程式的肥宅，閒暇之餘也會看輕小說，歐美劇。
喜歡網路相關，虛擬化，分散式系統等方面，目前剛開始接觸，還有很多需要學習的地方。 希望可以透過這個Blog紀錄下學習的歷程，幫助後輩不要踩重複的坑。
最常使用的是go語言，寫起來十分的痛快，時不時會在班上傳教Go語言。
長期把github當作FB在逛，覺得開源是一件很美好的事情，希望大家投入開源，讓這個世界變得更好。

GitHub</description>
    </item>
    
    <item>
      <title>SDN入門文章(2): OpenFlow1.0協定講解</title>
      <link>https://davidleitw.github.io/posts/network/sdn/sdn2/</link>
      <pubDate>Wed, 08 Jan 2020 08:06:25 +0600</pubDate>
      
      <guid>https://davidleitw.github.io/posts/network/sdn/sdn2/</guid>
      <description>前言 想要深入了解一個協定的內容，看規格書是最快的，因為剛開始學習 SDN 相關的知識，所以目前正在讀OpenFlow1.0相關的內容，這篇文章會先主要介紹OpenFlow 1.0的架構，以及一些 spec 的整理.
之後也會整理一些 OpenFlow 1.3版本的內容，並且簡單描述跟 OpenFlow 1.0的差異。
為什麼會著重在1.0與1.3兩個版本呢？  1.0版本與之後的版本不兼容，所以1.0要最先介紹。 1.0以及1.3版本被選為長期支持的穩定版本 1.3為目前的主流版本，多數支持OpenFlow的硬體是支援OpenFlow1.3
參考資料: OpenFlow 協定演進
 底下會依照 OpenFlow 1.0 spec 的編排，去依據介紹完整的協定。
 Switch Components  Flow Table(存放規則)  Header Fields Counters Actions     Matching (配對條件流程) Secure Channel OpenFlow Protocol Message  Controller-to-Switch Asynchronous Symmetric   結語  OpenFlow 1.0 架構 OpenFlow 1.0 spec 架構圖
 Flow Table 在 OpenFlow Switch 中存放轉發規則的表稱之為 Flow Table</description>
    </item>
    
    <item>
      <title>SDN入門文章(1): 什麼是SDN</title>
      <link>https://davidleitw.github.io/posts/network/sdn/sdn1/</link>
      <pubDate>Tue, 07 Jan 2020 08:06:25 +0600</pubDate>
      
      <guid>https://davidleitw.github.io/posts/network/sdn/sdn1/</guid>
      <description>此專案用來整理一些學習 SDN 的相關知識以及參考資料。 由於剛開始學習沒多久，所以會著重於個人學習的順序，希望在寫心得的同時也可以幫助到一些想要研究 SDN 的朋友。
當然，由於我也是剛開始學習，所以整理的心得如果有誤也請各位前輩們指點
預備知識 在學習 SDN 之前我準備先複習了一輪 computer networking a top-down approach 7th，之前大學學過的很多部份已經有點忘記了，所以先把傳統的網路概論複習一輪，之後進入SDN的學習時，才會比較清楚知道為什麼要提出SDN的概念，SDN具體來說是要解決哪些傳統架構無法解決的問題。
之後會陸續整理一點網路的基礎理論心得，讓之後SDN的一些概念比較好解釋。
什麼是 SDN 以及 SDN 的發展歷史  參考文章
 SDN 簡介 SDN 發展趨勢   傳統網路的一些特點:
 每個節點是由設備單獨控制，屬於分散式架構。 控制面以及轉接面放在同一個設備上。 管理員無法直接的操作封包轉送行為，僅能控制設備的通訊協定，再藉由通訊協定的規則去操作設備。 通訊協定對於設備的影響是固定的，無法控制非自己協定內的規則。  SDN 想要採取集中式控制，要求轉接面跟控制面分離，實際上由遠端的 controller 計算以及分送每一個路由器的轉送表，管理員可以直接操作設備轉接封包的行為。
SDN 並非一種技術，而是一種設計的理念，只要符合控制面以及轉接面的分離，以及開放的可程式化設計界面，就可以稱為 SDN 架構。通常 SDN 也伴隨著集中控制的特性，藉由在 controller 獲得的網路全局資料(並非傳統只能獲得局部資料)，根據其業務邏輯進行調整及優化。
常用名詞解釋 Network Device 網路設備 網路設備不僅限於實體的設備(例如 switch ,路由器等等)，也有可能是虛擬的 switch (例如 OVS)，封包在網路設備之前被處理以及轉送。網路設備藉由 Southbound Interface 接收 controller 發過來的指令配置轉送的規則，也可以透過 Southbound Interface 來將一些資料回傳給 controller。</description>
    </item>
    
  </channel>
</rss>
